import mongoose, { Document, Schema, Model } from 'mongoose';

export interface IInteraction extends Document {
  userId: mongoose.Types.ObjectId;
  contentId: mongoose.Types.ObjectId;
  // A unique ID for this specific interaction session, generated by the client
  // This allows us to link 'start', 'update', and 'end' events together.
  sessionId: string; 
  eventType: 'start' | 'update' | 'end' | 'completion_event';
  timestamp: Date;
  // These fields will be populated on the 'end' event
  durationSeconds?: number;
  startProgress?: number; // Progress when the session started
  endProgress?: number;   // Progress when the session ended
  // e.g., for quizzes, this could be the score achieved during this session
  performanceMetric?: number; 
}

const InteractionSchema = new Schema<IInteraction>({
  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  contentId: { type: Schema.Types.ObjectId, ref: 'Content', required: true, index: true },
  sessionId: { type: String, required: true, index: true },
  eventType: { type: String, enum: ['start', 'update', 'end', 'completion_event'], required: true },
  timestamp: { type: Date, default: Date.now },
  durationSeconds: { type: Number },
  startProgress: { type: Number, min: 0, max: 100 },
  endProgress: { type: Number, min: 0, max: 100 },
  performanceMetric: { type: Number },
}, {
  timestamps: true // Adds createdAt, updatedAt automatically
});

// Compound index for efficient querying of a user's session history for a specific content
InteractionSchema.index({ userId: 1, contentId: 1, sessionId: 1 });

const Interaction: Model<IInteraction> = mongoose.models.Interaction || mongoose.model<IInteraction>('Interaction', InteractionSchema);

export default Interaction;
