// components/viewer/text-viewer.tsx (or wherever you keep viewer components)
import React from "react";
import ReactMarkdown from 'react-markdown';
import rehypeSanitize from 'rehype-sanitize';
import remarkGfm from 'remark-gfm'; // <--- Import GFM plugin

// --- Props Interface ---
// Align with TextProps from the editor where relevant for styling
export interface TextViewerComponentProps {
  content: string;
  width?: string | number; // Can be used for container width if needed in viewer layout
  alignment?: "left" | "center" | "right" | "justify";
  fontSize?: string; // Base font size for the container
  color?: string;    // Base text color
  fontWeight?: string; // Base font weight
  padding?: string | number; // Padding for the container

  // x, y, height are likely ignored in a standard flow-based viewer
  x?: number;
  y?: number;
  height?: number | string;
}

export const TextViewerComponent: React.FC<TextViewerComponentProps> = ({
  content,
  width = "100%", // Default to full width within its parent container
  alignment = "left",
  fontSize = "16px", // Match editor default base size
  color = "#333333", // Match editor default
  fontWeight = "normal", // Match editor default
  padding = "8px", // Match editor default
}) => {

  // --- Container Style ---
  // Applies base typography and layout settings to the component's bounding box
  const containerStyle: React.CSSProperties = {
    width: typeof width === 'number' ? `${width}px` : width,
    textAlign: alignment,
    fontSize: fontSize,
    color: color,
    fontWeight: fontWeight,
    padding: typeof padding === 'number' ? `${padding}px` : padding,
    overflowWrap: 'break-word', // Ensure long words break correctly
    lineHeight: 1.5, // Match editor's base line height for consistency
    // Add any other container-level styles needed
  };

  return (
    // Apply container styles and optionally add margin for spacing between elements
    <div style={containerStyle} className="my-2">
       {/* --- Markdown Rendering --- */}
       {/* Apply prose styles here to style the elements generated by ReactMarkdown */}
       {/* Use the same prose classes as the editor for visual consistency */}
       <div className="prose prose-sm sm:prose lg:prose-lg xl:prose-xl max-w-none">
         <ReactMarkdown
            remarkPlugins={[remarkGfm]}       // Enable GFM features (tables, strikethrough, etc.)
            rehypePlugins={[rehypeSanitize]} // Sanitize HTML output for security
         >
            {content || ""}
         </ReactMarkdown>
       </div>
    </div>
  );
};

// No CraftJS specific properties needed for the viewer component